@{
    Seog_Crr_Log objLog = new Seog_Crr_Log();
    Seog_Crr_Data objData = new Seog_Crr_Data();
    Seog_Crr_Utility objUtility = new Seog_Crr_Utility();
    Seog_Crr_LuceneSearch objSearch = new Seog_Crr_LuceneSearch();
    Seom_Crr_CareerJob objJob = new Seom_Crr_CareerJob();
    DataTable dtbJobPostingData = null;
    DataSet dstSearchResult = null;
    DataTable dtbSearchResult = null;
    DataTable dtbJobPostingDataFromUrl = null;
}

@try
{
    int intPageSize = (System.Configuration.ConfigurationManager.AppSettings["pagesize"] ?? "10").ChangeType<int>();
    Hashtable hshPageParams = (Hashtable)ViewBag.PageParams;
    dtbJobPostingData = hshPageParams["JobPostingData"] as DataTable;
    int intCount = 0;
    SearchKeywordType searchType = (SearchKeywordType)hshPageParams["SearchKeywordType"];
    string strKeyword = dtbJobPostingData.Rows[0]["Title"].ToString();

    dstSearchResult = objJob.SalSearchJob(hshPageParams, out intCount); // get request page always default search job title
    dtbSearchResult = dstSearchResult.Tables[0];
    dtbJobPostingDataFromUrl = hshPageParams["JobPostingData"] as DataTable;
    string strJobPostingIDFromUrl = dtbJobPostingDataFromUrl.Rows[0]["ID"].ToString();
    //string strCareerJobPostingIDFromUrl = Request.RequestContext.RouteData.GetRequiredString("strCareerJobPostingID");
    string strCareerJobPostingIDFromUrl = Request["jid"];
    var insertCareerJobPostingActionFromGetRequest = new Action(() =>
    {
        DataRow drwNew = dtbSearchResult.NewRow();
        drwNew["JobPostingID"] = strJobPostingIDFromUrl;
        drwNew["CareerJobPostingID"] = strCareerJobPostingIDFromUrl;
        drwNew["JobPostingTitle"] = dtbJobPostingDataFromUrl.Rows[0]["Title"].ToString();
        drwNew["SEOTitle"] = dtbJobPostingDataFromUrl.Rows[0]["SEOTitle"].ToString();
        drwNew["PostDate"] = dtbJobPostingDataFromUrl.Rows[0]["PostDate"].ToString();
        drwNew["City"] = dtbJobPostingDataFromUrl.Rows[0]["City"].ToString();
        drwNew["StateCode"] = dtbJobPostingDataFromUrl.Rows[0]["State"].ToString();
        drwNew["EmploymentType"] = dtbJobPostingDataFromUrl.Rows[0]["EmploymentType"].ToString();
        drwNew["CompanyName"] = dtbJobPostingDataFromUrl.Rows[0]["CompanyName"].ToString();
        drwNew["IsWorkFromHome"] = dtbJobPostingData.Columns.Contains("WFH") ? dtbJobPostingData.Rows[0]["WFH"].ToString() : null;
        drwNew["SEOCompanyName"] = dtbJobPostingDataFromUrl.Rows[0]["SEOCompanyName"].ToString();
        dtbSearchResult.Rows.InsertAt(drwNew, 0);

        intCount++;
    });

    var rows = dtbSearchResult.Select($"JobPostingID='{strJobPostingIDFromUrl}'");
    foreach (var row in rows)
    {
        row.Delete();
    }
    intCount -= rows.Length;
    // when lucene search result not include job posting from url, then the job listing will show (pagesize+1) in the first page.

    insertCareerJobPostingActionFromGetRequest(); //  make the career job from url aways show in the first postion

    <div class="crr-job-number crr-text-navy font-bold">@(intCount>=10000?"10000+":intCount.ToString()) Job@(intCount > 1 ? "s" : "")</div>
    <div class="crr-joblisting-container">
        @{
            string strAppendStyleForSelectedJob = string.Empty;
            DataRow drw = dtbSearchResult.Rows[0];
            string strCareerJobPostingID = drw["CareerJobPostingID"].ToString();
            string strJobPostingID = drw["JobPostingID"].ToString();
            string strLocation = string.Join(", ", drw["City"], drw["StateCode"]);
            string strSeoCompanyName = drw["SEOCompanyName"].ToString();
            string strSeoJobTitle = drw["SEOTitle"].ToString();
            string strEmploymentType = objUtility.SalUpperCaseFirstLetter(drw["EmploymentType"].ToString().Replace("-", " ").Replace("_", " ").Replace(",", " | ").Trim());
            string strDateTime = drw["PostDate"].ToString();

            <input type="hidden" name="hd_pj" id="hd_pj" value="" />
            <input type="hidden" name="hd_nj" id="hd_nj" value="" />
            @*<input type="hidden" name="hd_nj" id="hd_nj" value="@objJob.SalGenerateCareerJobPostingDetailUrl(drwNext["SEOCompanyName"] as string,drwNext["SEOTitle"] as string,drwNext["CareerJobPostingID"] as string,drwNext["City"] as string,drwNext["StateCode"] as string)" />*@

            <a class="crr-joblisting-wrapper cursor-pointer job selected" href="@objJob.SalGenerateCareerJobPostingDetailUrl(strSeoCompanyName,strSeoJobTitle,strCareerJobPostingID,drw["City"].ToString(),drw["StateCode"].ToString())" title="@drw["JobPostingTitle"].ToString()">
                <div class="crr-joblisting-item">
                    <span class="jb text-size22">@drw["JobPostingTitle"].ToString()</span>
                    <span class="cp color-212221 text-size16">  @drw["CompanyName"].ToString()</span>
                    <span class="l color-767676 text-size16">
                        @if (drw["IsWorkFromHome"]?.ToString() == "1")
                        {
                            @: @string.Join(" | ", strLocation, strEmploymentType, "Remote")
                        }
                        else
                        {
                            @: @string.Join(" | ", strLocation, strEmploymentType)
                        }
                    </span>
                </div>
                <div class="crr-joblisting-item">
                    @if (!string.IsNullOrEmpty(strDateTime))
                    {
                        <div class='d'>@objUtility.SalGetPostDateDesc(Convert.ToDateTime(drw["PostDate"]))</div>
                    }
                </div>
            </a>
        }

        @for (int intIndex = 1; intIndex < dtbSearchResult.Rows.Count; intIndex++)
        {
            strAppendStyleForSelectedJob = string.Empty;
            drw = dtbSearchResult.Rows[intIndex];
            strCareerJobPostingID = drw["CareerJobPostingID"].ToString();
            strJobPostingID = drw["JobPostingID"].ToString();
            strLocation = string.Join(", ", drw["City"], drw["StateCode"]);
            strSeoCompanyName = drw["SEOCompanyName"].ToString();
            strSeoJobTitle = drw["SEOTitle"].ToString();
            strEmploymentType = objUtility.SalUpperCaseFirstLetter(drw["EmploymentType"].ToString().Replace("-", " ").Replace("_", " ").Replace(",", " | ").Trim());
            strDateTime = drw["PostDate"].ToString();

            <a class="crr-joblisting-wrapper cursor-pointer" href="@objJob.SalGenerateCareerJobPostingDetailUrl(strSeoCompanyName,strSeoJobTitle,strCareerJobPostingID,drw["City"].ToString(),drw["StateCode"].ToString())" title="@drw["JobPostingTitle"].ToString()">
                <div class="crr-joblisting-item">
                    <span class="jb text-size22">@drw["JobPostingTitle"].ToString()</span>
                    <span class="cp color-212221 text-size16">  @drw["CompanyName"].ToString()</span>
                    <span class="l color-767676 text-size16">
                        @if (drw["IsWorkFromHome"]?.ToString() == "1")
                        {
                            @: @string.Join(" | ", strLocation, strEmploymentType, "Remote")
                        }
                        else
                        {
                            @: @string.Join(" | ", strLocation, strEmploymentType)
                        }
                    </span>
                </div>
                <div class="crr-joblisting-item">
                    @if (!string.IsNullOrEmpty(strDateTime))
                    {
                        <div class='d'>@objUtility.SalGetPostDateDesc(Convert.ToDateTime(drw["PostDate"]))</div>
                    }
                </div>
            </a>
        }
    </div>
    if (intCount > intPageSize)
    {
        <div class="crr-row-loadmore">
            <a class="btn crr-btn crr-btn-size crr-btn-bluedark font-semibold crr-loadmore-btn" href="~/jobs" id="crr-btn-loadmore"><span>Load More</span></a>
        </div>
    }
}
catch (Exception ex)
{
    var errorInfo = $"Error is caused by calling the view file:{((RazorView)ViewContext.View).ViewPath}.";
    objLog.SalError($"{errorInfo}", ex);
    if (ViewBag.IsDebugMode == "1")
    {
        throw new Exception($"{errorInfo}", ex);
    }
}
finally
{
    objData.SalCleanDataTable(ref dtbJobPostingDataFromUrl);
    objData.SalCleanDataTable(ref dtbSearchResult);
    objData.SalCleanDataSet(ref dstSearchResult);
    objData.SalCleanDataTable(ref dtbJobPostingData);
}